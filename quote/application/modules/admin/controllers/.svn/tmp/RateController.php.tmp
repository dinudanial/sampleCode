<?php

class Admin_RateController extends Zend_Controller_Action {

    /**
     * Initializes the controller
     *
     * @return void
     */
    public function init() {
        // Optional added for consistency
        parent::init();

        // Excel format context
        $excelConfig =
                array(
                    'excel' => array(
                        'suffix' => 'excel',
                        'headers' => array(
                            'Content-type' => 'application/vnd.ms-excel')),
        );

        // Init the Context Switch Action helper
        $contextSwitch = $this->_helper->contextSwitch();

        // Add the new context
        $contextSwitch->setContexts($excelConfig);

        // Set the new context to the reports action
        $contextSwitch->addActionContext('report', 'excel');

        // Initializes the action helper
        $contextSwitch->initContext();
    }

    public function indexAction() {
        $form = new admin_Form_RateSearch();
        $this->view->form = $form;
        $rateform = new admin_Form_addRate();
        $this->view->rateform = $rateform;
        $rateLineForm = new admin_Form_RateLine();
        $this->view->ratelineform = $rateLineForm;
    }

    public function getcountrylistAction() {
        $this->_helper->viewRenderer->setNoRender(true);
        if ($this->_request->isPost()) {
            $RegionId = $this->getRequest()->getPost('regionid');
            $country = new admin_Model_Country();
            $countryData = $country->findCountrydata((integer) $RegionId);
            echo Zend_Json::encode($countryData);
            exit;
        }
    }

    public function reportAction() {
		
        $filter = array();
        $filter['country'] = $this->getRequest()->getParam('countryid');
        $filter['region'] = $this->getRequest()->getParam('regionid');
        $filter['rateId'] = $this->getRequest()->getParam('masterid');
        $filter['insuranceClass'] = $this->getRequest()->getParam('insuranceClass');
        $filter['dataIssue'] = $this->getRequest()->getParam('dataIssue');
        try {
            $rate = new admin_Model_Rate();
            $rateData = $rate->find($filter);
            //print_r($rateData);exit;
            $rateLine =	new admin_Model_RateLineDao();
            foreach ($rateData as $value) {
            	$rateLinedata = $rateLine->findRateLine($value->getId());
            	//echo "<pre>";
           // print_r($rateLinedata);exit;
            }
            //echo "<pre>";
           // print_r($rateLinedata);exit;
            require_once 'Spreadsheet/Excel/Writer.php';

// Lets define some custom colors codes
            define('CUSTOM_DARK_BLUE', 20);
            define('CUSTOM_BLUE', 21);
            define('CUSTOM_LIGHT_BLUE', 22);
            define('CUSTOM_YELLOW', 23);
            define('CUSTOM_GREEN', 24);

// First, we create a Workbook
            $current = getcwd();
            if (file_exists($current . '/uploads/files/rate.xls')){
            	@unlink($current . '/uploads/files/rate.xls');
            }
            $workbook = new Spreadsheet_Excel_Writer($current . '/uploads/files/rate.xls');

// Add one sheet, called: Users Report
            $worksheet = &$workbook->addWorksheet('Rates Report');

// Create the custom colors on our new workbook
// This function takes 4 params:
//    - Code index [1 to 64]
//    - RGB colors (0-255)
            $workbook->setCustomColor(CUSTOM_DARK_BLUE, 31, 73, 125);
            $workbook->setCustomColor(CUSTOM_BLUE, 0, 112, 192);
            $workbook->setCustomColor(CUSTOM_LIGHT_BLUE, 184, 204, 228);
            $workbook->setCustomColor(CUSTOM_YELLOW, 255, 192, 0);
            $workbook->setCustomColor(CUSTOM_GREEN, 0, 176, 80);

// Lets hide gridlines
            $worksheet->hideScreenGridlines();

// Lets create some custom styles
            $formatHeader = &$workbook->addFormat();
            $formatHeader =
                    &$workbook->addFormat(
                            array('Size' => 16,
                                'VAlign' => 'vcenter',
                                'HAlign' => 'center',
                                'Bold' => 1,
                                'Color' => 'white',
                                'FgColor' => CUSTOM_DARK_BLUE));

            $formatReportHeader =
                    &$workbook->addFormat(
                            array('Size' => 9,
                                'VAlign' => 'bottom',
                                'HAlign' => 'center',
                                'Bold' => 1,
                                'FgColor' => CUSTOM_LIGHT_BLUE,
                                'TextWrap' => true));

            $formatData =
                    &$workbook->addFormat(
                            array(
                                'Size' => 8,
                                'HAlign' => 'center',
                                'VAlign' => 'vcenter'));

            /**
             * First, format the worksheet, adding the headers
             * and row/columns custom sizes
             */
// Create a nice header with a dark blue background
// The function setRow takes 3 parameters:
//    - row index
//    - row height
//    - Format to apply to row [Optional]
            $worksheet->setRow(0, 11, $formatHeader);
            $worksheet->setRow(1, 46, $formatHeader);
            $worksheet->setRow(2, 11, $formatHeader);

// Set the size of the columns
// The function setColumn takes 5 params:
//     - First column
//     - Last column
//     - Column Width
//     - Format [Optional, default = 0]
//     - Hidden [Optional, default = 0]
            $worksheet->setColumn(0, 0, 7); // User Id, shrink it to 7
            $worksheet->setColumn(1, 1, 12); // Name, set the width to 12
            $worksheet->setColumn(1, 1, 15); // Email, set the width to 15

            /**
             *
             * Once we have the format ready, add the text to the spreadsheet
             *
             */
// Write a text header
            $worksheet->write(1, 1, 'Rate report', $formatHeader);

// Create the header for the data starting @ row 4
            $indexCol = 0;
            $indexRow = 4;
            $worksheet->write($indexRow, $indexCol++, 'ID_RateMaster', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Country', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'TaxType', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'Insurance Class', $formatReportHeader);
            
           /* $worksheet->write($indexRow, $indexCol++, 'ID_RateMaster', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'ID_Country', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Country', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'ID_Region', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Region', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Authorised', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'ID_InsuranceClass', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__InsuranceClass', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__TypeofTax', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__TaxSubClass', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__DefaultSubClass', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__RateStartDate', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__RateEndDate', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__TertiaryClass', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__NoAutoCreate', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'ID_RateAdditional', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__NonAdmittedRate', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__AdmittedRate', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'ID_BasisOfCalculation', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__BasisOfCalculation', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__TaxBorneBy', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__TaxAdministeredBy', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Admitted_TaxPayablebyInsuredandAdministeredByInsurer', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Admitted_TaxPayableByInsuredAndAdminByInsurerOrAgent', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Admitted_TaxPayableByInsurer', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Admitted_TaxPayableByInsuredLocally', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__NonAdmitted_TaxPayablebyInsuredandAdministeredByInsurer', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__NonAdmitted_TaxPayableByInsuredAndAdminByInsurerOrAgent', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__NonAdmitted_TaxPayableByInsuredLocally', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'ID_Currency', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Currency', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Multiplier1_Name', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Multiplier1_Rate_Admitted', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Multiplier1_Rate_NonAdmitted', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Multiplier2_Name', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Multiplier2_Rate_Admitted', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Multiplier2_Rate_NonAdmitted', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Multiplier3_Name', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Multiplier3_Rate_Admitted', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Multiplier3_Rate_NonAdmitted', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Band1_Minimum', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Band1_Maximum', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Band2_Minimum', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__Band2_Maximum', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__AdmittedRate_Band2', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'd__NonAdmittedRate_Band2', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 's__Enabled', $formatReportHeader);
            $worksheet->write($indexRow, $indexCol++, 'Error', $formatReportHeader);*/

            $indexRow++;   // Advance to the next row
            $indexCol = 0; // Start @ column 0
// Print the report data
            if (count($rateData) == 0) {
                // No data
                $worksheet->write(
                        $indexRow, $indexCol, 'No data to display', $formatData);
            } else {
                // Write the data
 
                foreach ($rateData as $rate) {
                    $worksheet->writeNumber(
                            $indexRow, $indexCol++, $rate->getId(), $formatData);
                            
					 $worksheet->write(
                            $indexRow, $indexCol++, $rate->getCountryName(), $formatData);
                            
                    $worksheet->write(
                            $indexRow, $indexCol++, $rate->getTaxType(), $formatData);

                    $worksheet->write(
                            $indexRow, $indexCol++, $rate->getInsuranceClassName(), $formatData);

                    // Advance to the next row
                    $indexRow++;
                    $indexCol = 0;
                }
            }

            /**
             *
             * Response with the excel file
             *
             */
// Sends HTTP headers for the Excel file.
//$workbook->send('report.xls');
// Calls finalization methods.
// This method should always be the last one to be called on every workbook
            $workbook->close();
            
            $file = $current . '/uploads/files/rate.xls';

            if (file_exists($file)) {
                header('Content-Description: File Transfer');
                header('Content-Type: application/octet-stream');
                header('Content-Disposition: attachment; filename=' . basename($file));
                header('Content-Transfer-Encoding: binary');
                header('Expires: 0');
                header('Cache-Control: must-revalidate');
                header('Pragma: public');
                header('Content-Length: ' . filesize($file));
                ob_clean();
                flush();
                readfile($file);
                exit;
            }
            //$this->view->rates = $rate->find($filter);
        } catch (Exception $e) {
            echo "Error :" . $e->getMessage();
        }
    }

    public function getratelistAction() {
        $this->_helper->viewRenderer->setNoRender(true);
        $formData = $this->_request->getPost();
        if (empty($formData) || empty($formData['region']) || empty($formData['country'])) {
            throw new Exception("Invalid argument exception in find rates!");
        } else {
            $rate = new admin_Model_Rate();
            $rateData = $rate->find($formData);
            $rateJsonAaaray = array();
            foreach ($rateData as $key) {
                $rateJsonAaaray[] = admin_Model_Rate::getJson($key);
            }
            echo Zend_Json::encode($rateJsonAaaray);
            exit;
        }
    }

    public function saveAction() {
        $this->_helper->viewRenderer->setNoRender(true);
        $rateform = new admin_Form_addRate();
        if ($this->_request->isPost()) {
            $rate = new admin_Model_Rate();
            $formData = $this->_request->getPost();
            if ($formData['masterRateId'] != 'new' && $formData['masterRateId']) {
                $rate->setId((integer) $formData['masterRateId']);
            }
            $rate->setTaxType($formData['taxType']);
            $rate->setRegion((integer) $formData['newRateRegion']);
            $rate->setCountry((integer) $formData['newRatecountry']);
            $rate->setCurrency((integer) $formData['currency']);
            $rate->setInsuranceClass((integer) $formData['newRateinsuranceclass']);
            $rate->setTaxSubClass($formData['taxSubClass']);
            $rate->setTertiry($formData['tertiary']);
            $rate->setDefaultSubClass((integer) $formData['defaultSubclasOrTertiary']);
            $rate->setAutoCreate($formData['noAutoCreate']);
            $result = $rate->saveRate($rate);
            
            if($result){
                $this->_helper->redirector();
            	$this->_redirect("/admin/Rate/index");
            }
            	
        }
    }

    public function rateeditAction() {
        $this->_helper->viewRenderer->setNoRender(true);
        if ($this->_request->isPost()) {
            $rateId = $this->_request->getPost('rateId');
            $rateId = (integer) $rateId;
            ///echo $rateId;exit;
            if (!$rateId || !is_int($rateId)) {
                throw new Exception("Invalid argument exception in edit rates!");
            } else {
                $rate = new admin_Model_Rate();
                $rateData = $rate->findRate($rateId);              
                $jsonData = admin_Model_Rate::getJson($rateData);
                echo $jsonData;
                exit;
            }
        }
    }

}

