<?php

/* Author                : Renesankar(rene@toobler.com)
 * Company               : Toobler
 * Email:                : info@toobler.com
 * Web site              : http://www.toobler.com
 * Created               : 06/03/2012
 * Description       	 : 
 * ==============================================================================================
 * Change History:
 * ----------------------------------------------------------------------------------------------
 * Sl.No.  Date   Author   Description
 * ----------------------------------------------------------------------------------------------
 * 	1
 *
 *
 * ----------------------------------------------------------------------------------------------
 *
 */

class admin_Model_RateLine {

    private $id;
    private $rateStartDate;
    private $rateEndDate;
    private $basisOfCalculation;
    private $basisOfCalculationName;
    private $admittedRate;
    private $nonAdmittedRate;
    private $taxMinimum;
    private $taxMaximum;
    private $additionalrateid;
    private $amountPerXvalue;
    private $amountPerX;
    private $insuredResidenceApplicable;
    private $deMinimisApplicable;
    private $band2AdmittedRate;
    private $band3AdmittedRate;
    private $band2NonAdmittedRate;
    private $band3NonAdmittedRate;
    private $bandApplyProportionately;
    private $admittedTaxPayableByInsuredAndAdminByInsurerOrAgent;
    private $admittedTaxPayablebyInsuredandAdministeredByInsurer;
    private $admittedTaxPayableByInsuredLocally;
    private $admittedTaxPayableByInsurer;
    private $nonAdmittedTaxPayableByInsuredAndAdminByInsurerOrAgent;
    private $nonAdmittedTaxPayablebyInsuredandAdministeredByInsurer;
    private $nonAdmittedTaxPayableByInsuredLocally;
    private $nonAdmittedTaxPayableByInsurer;
    private $deMinimisTotalPremiumThreshold;
    private $deMinimisPremiumAllocationThreshold;
    private $multiInsuranceGroup;
    private $multiplier1Name;
    private $multiplier1AdmittedRate;
    private $multiplier1NonAdmittedRate;
    private $multiplier2Name;
    private $multiplier2AdmittedRate;
    private $multiplier2NonAdmittedRate;
    private $multiplier3Name;
    private $multiplier3AdmittedRate;
    private $multiplier3NonAdmittedRate;
    private $domesticTransportationElement;
    private $nonFireElementRate;
    private $layeringPercentage;
    private $maltaPremiumLevel1StampDuty;
    private $maltaPremiumLevel1Rate;
    private $maltaPremiumLevel2StampDuty;
    private $maltaPremiumLevel2Rate;
    private $maltaPremiumLevel3StampDuty;
    private $maltaPremiumLevel3Rate;
    private $minimumBand1;
    private $maximumBand1;
    private $minimumBand2;
    private $maximumBand2;
    private $minimumBand3;
    private $maximumBand3;
    private $authorised;
    private $country;
    private $countryId;
    private $economicArea;
    private $insuranceClass;
    private $taxAdminister;
    private $currencyId;
    private $insuranceClassId;
    private $rateMasterId;
    private $regionId;
    private $createDate;
    private $modifiedDate;
    private $rateDisplay;

    public function __construct($id, $rateMasterId) {
        $this->setId($id);
        $this->setRateMasterId($rateMasterId);
    }

    public function getId() {
        return $this->id;
    }

    public function setId($id = null) {
        if (!is_int($id) && $id != null) {
            throw new Exception('Invliad arugmrnt in setId');
        }
        $this->id = $id;
    }

    public function getRateStartDate() {
        return $this->rateStartDate;
    }

    public function setRateStartDate($rateStartDate) {
        $this->rateStartDate = $rateStartDate;
    }

    public function getRateEndDate() {
        return $this->rateEndDate;
    }

    public function setRateEndDate($rateEndDate) {
        $this->rateEndDate = $rateEndDate;
    }

    public function getBasisOfCalculation() {
        return $this->basisOfCalculation;
    }

    public function setBasisOfCalculation($basisOfCalculation) {
        $this->basisOfCalculation = $basisOfCalculation;
    }
    
    public function getBasisOfCalculationName() {
        return $this->basisOfCalculationName;
    }

    public function setBasisOfCalculationName($basisOfCalculationName) {
        $this->basisOfCalculationName = $basisOfCalculationName;
    }

    public function getAdmittedRate() {
        return $this->admittedRate;
    }

    public function setAmountPerX($amountPerX) {
        $this->amountPerX = $amountPerX;
    }
    
    public function getAmountPerX() {
        return $this->amountPerX;
    }
    public function setAmountPerXvalue($amountPerXvalue) {
        $this->amountPerXvalue = $amountPerXvalue;
    }
    
    public function getAmountPerXvalue() {
        return $this->amountPerXvalue;
    }

    public function setAdmittedRate($admittedRate) {
        $this->admittedRate = $admittedRate;
    }

    public function getNonAdmittedRate() {
        return $this->nonAdmittedRate;
    }

    public function setNonAdmittedRate($nonAdmittedRate) {
        $this->nonAdmittedRate = $nonAdmittedRate;
    }

    public function getTaxMinimum() {
        return $this->taxMinimum;
    }

    public function setTaxMinimum($taxMinimum) {
        $this->taxMinimum = $taxMinimum;
    }

    public function getTaxMaximum() {
        return $this->taxMaximum;
    }

    public function setTaxMaximum($taxMaximum) {
        $this->taxMaximum = $taxMaximum;
    }
    
	public function getAdditionalRateId() {
        return $this->additionalrateid;
    }

    public function setAdditionalRateId($additionalrateid) {
        $this->additionalrateid = $additionalrateid;
    }

    public function getInsuredResidenceApplicable() {
        return $this->insuredResidenceApplicable;
    }

    public function setInsuredResidenceApplicable($insuredResidenceApplicable) {
        $this->insuredResidenceApplicable = $insuredResidenceApplicable;
    }

    public function getDeMinimisApplicable() {
        return $this->deMinimisApplicable;
    }

    public function setDeMinimisApplicable($deMinimisApplicable) {
        $this->deMinimisApplicable = $deMinimisApplicable;
    }
    
 	public function getDeMinimisTotalPremiumThreshold() {
        return $this->deMinimisTotalPremiumThreshold;
    }

    public function setDeMinimisTotalPremiumThreshold($deMinimisTotalPremiumThreshold) {
        $this->deMinimisTotalPremiumThreshold = $deMinimisTotalPremiumThreshold;
    }
    
	public function getDeMinimisPremiumAllocationThreshold() {
        return $this->deMinimisPremiumAllocationThreshold;
    }

    public function setDeMinimisPremiumAllocationThreshold($DeMinimisPremiumAllocationThreshold) {
        $this->deMinimisPremiumAllocationThreshold = $DeMinimisPremiumAllocationThreshold;
    }
    
	public function getMultiInsuranceGroup() {
        return $this->multiInsuranceGroup;
    }

    public function setMultiInsuranceGroup($multiInsuranceGroup) {
        $this->multiInsuranceGroup = $multiInsuranceGroup;
    }
    
    public function getBand2AdmittedRate() {
        return $this->band2AdmittedRate;
    }

    public function setBand2AdmittedRate($band2AdmittedRate) {
        $this->band2AdmittedRate = $band2AdmittedRate;
    }

    public function getBand3AdmittedRate() {
        return $this->band3AdmittedRate;
    }

    public function setBand3AdmittedRate($band3AdmittedRate) {
        $this->band3AdmittedRate = $band3AdmittedRate;
    }

    public function getBand2NonAdmittedRate() {
        return $this->band2NonAdmittedRate;
    }

    public function setBand2NonAdmittedRate($band2NonAdmittedRate) {
        $this->band2NonAdmittedRate = $band2NonAdmittedRate;
    }

    public function getBand3NonAdmittedRate() {
        return $this->band3NonAdmittedRate;
    }

    public function setBand3NonAdmittedRate($band3NonAdmittedRate) {
        $this->band3NonAdmittedRate = $band3NonAdmittedRate;
    }

    public function getBandApplyProportionately() {
        return $this->bandApplyProportionately;
    }

    public function setBandApplyProportionately($bandApplyProportionately) {
        $this->bandApplyProportionately = $bandApplyProportionately;
    }

    public function getAdmittedTaxPayableByInsuredAndAdminByInsurerOrAgent() {
        return $this->admittedTaxPayableByInsuredAndAdminByInsurerOrAgent;
    }

    public function setAdmittedTaxPayableByInsuredAndAdminByInsurerOrAgent($admittedTaxPayableByInsuredAndAdminByInsurerOrAgent) {
        $this->admittedTaxPayableByInsuredAndAdminByInsurerOrAgent = $admittedTaxPayableByInsuredAndAdminByInsurerOrAgent;
    }

    public function getAdmittedTaxPayablebyInsuredandAdministeredByInsurer() {
        return $this->admittedTaxPayablebyInsuredandAdministeredByInsurer;
    }

    public function setAdmittedTaxPayablebyInsuredandAdministeredByInsurer($admittedTaxPayablebyInsuredandAdministeredByInsurer) {
        $this->admittedTaxPayablebyInsuredandAdministeredByInsurer = $admittedTaxPayablebyInsuredandAdministeredByInsurer;
    }

    public function getAdmittedTaxPayableByInsuredLocally() {
        return $this->admittedTaxPayableByInsuredLocally;
    }

    public function setAdmittedTaxPayableByInsuredLocally($admittedTaxPayableByInsuredLocally) {
        $this->admittedTaxPayableByInsuredLocally = $admittedTaxPayableByInsuredLocally;
    }

    public function getAdmittedTaxPayableByInsurer() {
        return $this->admittedTaxPayableByInsurer;
    }

    public function setAdmittedTaxPayableByInsurer($admittedTaxPayableByInsurer) {
        $this->admittedTaxPayableByInsurer = $admittedTaxPayableByInsurer;
    }

    public function getNonAdmittedTaxPayableByInsuredAndAdminByInsurerOrAgent() {
        return $this->nonAdmittedTaxPayableByInsuredAndAdminByInsurerOrAgent;
    }

    public function setNonAdmittedTaxPayableByInsuredAndAdminByInsurerOrAgent($nonAdmittedTaxPayableByInsuredAndAdminByInsurerOrAgent) {
        $this->nonAdmittedTaxPayableByInsuredAndAdminByInsurerOrAgent = $nonAdmittedTaxPayableByInsuredAndAdminByInsurerOrAgent;
    }

    public function getNonAdmittedTaxPayablebyInsuredandAdministeredByInsurer() {
        return $this->nonAdmittedTaxPayablebyInsuredandAdministeredByInsurer;
    }

    public function setNonAdmittedTaxPayablebyInsuredandAdministeredByInsurer($nonAdmittedTaxPayablebyInsuredandAdministeredByInsurer) {
        $this->nonAdmittedTaxPayablebyInsuredandAdministeredByInsurer = $nonAdmittedTaxPayablebyInsuredandAdministeredByInsurer;
    }

    public function getNonAdmittedTaxPayableByInsuredLocally() {
        return $this->nonAdmittedTaxPayableByInsuredLocally;
    }

    public function setNonAdmittedTaxPayableByInsuredLocally($nonAdmittedTaxPayableByInsuredLocally) {
        $this->nonAdmittedTaxPayableByInsuredLocally = $nonAdmittedTaxPayableByInsuredLocally;
    }

    public function getNonAdmittedTaxPayableByInsurer() {
        return $this->nonAdmittedTaxPayableByInsurer;
    }

    public function setNonAdmittedTaxPayableByInsurer($nonAdmittedTaxPayableByInsurer) {
        $this->nonAdmittedTaxPayableByInsurer = $nonAdmittedTaxPayableByInsurer;
    }

    public function getMultiplier1Name() {
        return $this->multiplier1Name;
    }

    public function setMultiplier1Name($multiplier1Name) {
        $this->multiplier1Name = $multiplier1Name;
    }

    public function getMultiplier1AdmittedRate() {
        return $this->multiplier1AdmittedRate;
    }

    public function setMultiplier1AdmittedRate($multiplier1AdmittedRate) {
        $this->multiplier1AdmittedRate = $multiplier1AdmittedRate;
    }

    public function getMultiplier1NonAdmittedRate() {
        return $this->multiplier1NonAdmittedRate;
    }

    public function setMultiplier1NonAdmittedRate($multiplier1NonAdmittedRate) {
        $this->multiplier1NonAdmittedRate = $multiplier1NonAdmittedRate;
    }

    public function getMultiplier2Name() {
        return $this->multiplier2Name;
    }

    public function setMultiplier2Name($multiplier2Name) {
        $this->multiplier2Name = $multiplier2Name;
    }

    public function getMultiplier2AdmittedRate() {
        return $this->multiplier2AdmittedRate;
    }

    public function setMultiplier2AdmittedRate($multiplier2AdmittedRate) {
        $this->multiplier2AdmittedRate = $multiplier2AdmittedRate;
    }

    public function getMultiplier2NonAdmittedRate() {
        return $this->multiplier2NonAdmittedRate;
    }

    public function setMultiplier2NonAdmittedRate($multiplier2NonAdmittedRate) {
        $this->multiplier2NonAdmittedRate = $multiplier2NonAdmittedRate;
    }

    public function getMultiplier3Name() {
        return $this->multiplier3Name;
    }

    public function setMultiplier3Name($multiplier3Name) {
        $this->multiplier3Name = $multiplier3Name;
    }

    public function getMultiplier3AdmittedRate() {
        return $this->multiplier3AdmittedRate;
    }

    public function setMultiplier3AdmittedRate($multiplier3AdmittedRate) {
        $this->multiplier3AdmittedRate = $multiplier3AdmittedRate;
    }

    public function getMultiplier3NonAdmittedRate() {
        return $this->multiplier3NonAdmittedRate;
    }

    public function setMultiplier3NonAdmittedRate($multiplier3NonAdmittedRate) {
        $this->multiplier3NonAdmittedRate = $multiplier3NonAdmittedRate;
    }

    public function getDomesticTransportationElement() {
        return $this->domesticTransportationElement;
    }

    public function setDomesticTransportationElement($domesticTransportationElement) {
        $this->domesticTransportationElement = $domesticTransportationElement;
    }

    public function getNonFireElementRate() {
        return $this->nonFireElementRate;
    }

    public function setNonFireElementRate($nonFireElementRate) {
        $this->nonFireElementRate = $nonFireElementRate;
    }

    public function getLayeringPercentage() {
        return $this->layeringPercentage;
    }

    public function setLayeringPercentage($layeringPercentage) {
        $this->layeringPercentage = $layeringPercentage;
    }

    public function getMaltaPremiumLevel1StampDuty() {
        return $this->maltaPremiumLevel1StampDuty;
    }

    public function setMaltaPremiumLevel1StampDuty($maltaPremiumLevel1StampDuty) {
        $this->maltaPremiumLevel1StampDuty = $maltaPremiumLevel1StampDuty;
    }

    public function getMaltaPremiumLevel1Rate() {
        return $this->maltaPremiumLevel1Rate;
    }

    public function setMaltaPremiumLevel1Rate($maltaPremiumLevel1Rate) {
        $this->maltaPremiumLevel1Rate = $maltaPremiumLevel1Rate;
    }

    public function getMaltaPremiumLevel2StampDuty() {
        return $this->maltaPremiumLevel2StampDuty;
    }

    public function setMaltaPremiumLevel2StampDuty($maltaPremiumLevel2StampDuty) {
        $this->maltaPremiumLevel2StampDuty = $maltaPremiumLevel2StampDuty;
    }

    public function getMaltaPremiumLevel2Rate() {
        return $this->maltaPremiumLevel2Rate;
    }

    public function setMaltaPremiumLevel2Rate($maltaPremiumLevel2Rate) {
        $this->maltaPremiumLevel2Rate = $maltaPremiumLevel2Rate;
    }

    public function getMaltaPremiumLevel3StampDuty() {
        return $this->maltaPremiumLevel3StampDuty;
    }

    public function setMaltaPremiumLevel3StampDuty($maltaPremiumLevel3StampDuty) {
        $this->maltaPremiumLevel3StampDuty = $maltaPremiumLevel3StampDuty;
    }

    public function getMaltaPremiumLevel3Rate() {
        return $this->maltaPremiumLevel3Rate;
    }

    public function setMaltaPremiumLevel3Rate($maltaPremiumLevel3Rate) {
        $this->maltaPremiumLevel3Rate = $maltaPremiumLevel3Rate;
    }

    public function getMinimumBand1() {
        return $this->minimumBand1;
    }

    public function setMinimumBand1($minimumBand1) {
        $this->minimumBand1 = $minimumBand1;
    }

    public function getMaximumBand1() {
        return $this->maximumBand1;
    }

    public function setMaximumBand1($maximumBand1) {
        $this->maximumBand1 = $maximumBand1;
    }

    public function getMinimumBand2() {
        return $this->minimumBand2;
    }

    public function setMinimumBand2($minimumBand2) {
        $this->minimumBand2 = $minimumBand2;
    }

    public function getMaximumBand2() {
        return $this->maximumBand2;
    }

    public function setMaximumBand2($maximumBand2) {
        $this->maximumBand2 = $maximumBand2;
    }

    public function getMinimumBand3() {
        return $this->minimumBand3;
    }

    public function setMinimumBand3($minimumBand3) {
        $this->minimumBand3 = $minimumBand3;
    }

    public function getMaximumBand3() {
        return $this->maximumBand3;
    }

    public function setMaximumBand3($maximumBand3) {
        $this->maximumBand3 = $maximumBand3;
    }

    public function getAuthorised() {
        return $this->authorised;
    }

    public function setAuthorised($authorised) {
        $this->authorised = $authorised;
    }

    public function getCountry() {
        return $this->country;
    }

    public function setCountry($country) {
        $this->country = $country;
    }

    public function getEconomicArea() {
        return $this->economicArea;
    }

    public function setEconomicArea($economicArea) {
        $this->economicArea = $economicArea;
    }

    public function getInsuranceClass() {
        return $this->insuranceClass;
    }

    public function setInsuranceClass($insuranceClass) {
        $this->insuranceClass = $insuranceClass;
    }

    public function getTaxAdminister() {
        return $this->taxAdminister;
    }

    public function setTaxAdminister($taxAdminister) {
        $this->taxAdminister = $taxAdminister;
    }

    public function getCountryId() {
        return $this->countryId;
    }

    public function setCountryId($countryId) {
        $this->countryId = $countryId;
    }

    public function getCurrencyId() {
        return $this->currencyId;
    }

    public function setCurrencyId($currencyId) {
        $this->currencyId = $currencyId;
    }

    public function getInsuranceClassId() {
        return $this->insuranceClassId;
    }

    public function setInsuranceClassId($insuranceClassId) {
        $this->insuranceClassId = $insuranceClassId;
    }

    public function setRegionId($regionId) {
        $this->regionId = $regionId;
    }
    
    public function getRegionId() {
        return $this->regionId;
    }

    public function getRateMasterId() {
        return $this->rateMasterId;
    }

    public function setRateMasterId($rateMasterId) {
        if (!is_int($rateMasterId)) {
            throw new Exception("Invalid argument in setRateMasterId");
        }
        $this->rateMasterId = $rateMasterId;
    }

    public function getCreateDate() {
        return $this->createDate;
    }

    public function setCreateDate($createDate) {
        $this->createDate = $createDate;
    }

    public function getModifiedDate() {
        return $this->modifiedDate;
    }

    public function setModifiedDate($modifiedDate) {
        $this->modifiedDate = $modifiedDate;
    }

    public function getRateDisplay() {
        return $this->rateDisplay;
    }

    public function setRateDisplay($rateDisplay) {
        $this->rateDisplay = $rateDisplay;
    }
/**
     * Save Rateline.
     * @param type $rateline
     * @return ratelineid
     * @throws Exception 
     */
    public function saveRateLine() {
        try {
            $rld = new admin_Model_RateLineDao();
            
            $status = false;         
            if ($this->id == null) {
                $status = $rld->saveRateLine($this->getArray());
            } else {
                $status = $rld->editRateLine($this->getArray());
            }
           // $status = $rld->saveRateLine($this->getArray());
            return $status;
        } catch (Exception $e) {
            throw new Exception($e->getMessage());
        }
    }
    /**
     * find rateline
     * @param type ratemasterid
     * @return array of object
     * @throws Exception 
     */
    public function findRateLines($rateId){
        //print_r($rateLineData);exit;
        if(!is_int($rateId)){
            throw new Exception("Invalid Rateid argument");
        }
        try{
            $rateDao = new admin_Model_RateLineDao();
            $rateLineData = $rateDao->findRateLines($rateId);
            $rateLineArray = array();
            if(!empty($rateLineData)){
                foreach($rateLineData as $rateline){     
                    $rateLine = new admin_Model_RateLine('',$rateId);
                    $rateLine->setId((integer)$rateline['ID_RateLine']);
                    $rateLine->setAdmittedRate($rateline['d__AdmittedRate']);
                    $rateLine->setNonAdmittedRate($rateline['d__NonAdmittedRate']);
                    $rateLine->setBasisOfCalculationName($rateline['d__BasisOfCalculation']);
                    $rateLine->setRateStartDate($rateline['d__RateStartDate']);
                    $rateLine->setRateEndDate($rateline['d__RateEndDate']);
                    $rateLine->setAmountPerX($rateline['d__AmountPerX']);
                    $rateLine->setAmountPerXvalue($rateline['d__AmountPerXValue']);
                    $rateLine->setAdmittedTaxPayableByInsuredAndAdminByInsurerOrAgent($rateline['d__Admitted_TaxPayableByInsuredAndAdminByInsurerOrAgent']);
                    $rateLine->setAdmittedTaxPayableByInsuredLocally($rateline['d__Admitted_TaxPayableByInsuredLocally']);
                    $rateLine->setAdmittedTaxPayablebyInsuredandAdministeredByInsurer($rateline['d__Admitted_TaxPayablebyInsuredandAdministeredByInsurer']);
                    $rateLine->setAdmittedTaxPayableByInsurer($rateline['d__Admitted_TaxPayableByInsurer']);
                    $rateLine->setAuthorised($rateline['d__Authorised']);
                    $rateLine->setInsuredResidenceApplicable($rateline['d__InsuredResidenceApplicable']);
                    $rateLine->setBand2AdmittedRate($rateline['d__AdmittedRate_Band2']);
                    $rateLine->setBand2NonAdmittedRate($rateline['d__NonAdmittedRate_Band2']);
                    $rateLine->setBand3AdmittedRate($rateline['d__NonAdmittedRate_Band3']);
                    $rateLine->setBand3NonAdmittedRate($rateline['d__NonAdmittedRate_Band3']);
                    $rateLine->setBandApplyProportionately($rateline['d__BandApplyProportionately']);
                    
                    $rateLine->setDeMinimisApplicable($rateline['d__DeMinimis_Enabled']);
                    $rateLine->setDeMinimisPremiumAllocationThreshold($rateline['d__DeMinimis_PremiumAllocationThreshold']);
                    $rateLine->setDeMinimisTotalPremiumThreshold($rateline['d__DeMinimis_TotalPremiumThreshold']);
                    $rateLine->setDomesticTransportationElement($rateline['d__DomesticTransportationElement']);
                    $rateLine->setInsuranceClassId((integer)$rateline['ID_InsuranceClass']);
                    $rateLine->setLayeringPercentage($rateline['d__LayeringPercentage']);
                    $rateLine->setMaltaPremiumLevel1Rate($rateline['d__MaltaStampDuty_Premium_Level1_Rate']);
                    $rateLine->setMaltaPremiumLevel1StampDuty($rateline['d__MaltaStampDuty_Premium_Level1']);
                    $rateLine->setMaltaPremiumLevel2Rate($rateline['d__MaltaStampDuty_Premium_Level2_Rate']);
                    $rateLine->setMaltaPremiumLevel2StampDuty($rateline['d__MaltaStampDuty_Premium_Level2']);
                    $rateLine->setMaltaPremiumLevel3Rate($rateline['d__MaltaStampDuty_Premium_Level3_Rate']);
                    $rateLine->setMaltaPremiumLevel3StampDuty($rateline['d__MaltaStampDuty_Premium_Level3']);
                    $rateLine->setMaximumBand1($rateline['d__Band1_Maximum']);
                    $rateLine->setMaximumBand2($rateline['d__Band2_Maximum']);
                    $rateLine->setMaximumBand3($rateline['d__Band3_Maximum']);
                    $rateLine->setMinimumBand1($rateline['d__Band1_Minimum']);
                    $rateLine->setMinimumBand2($rateline['d__Band2_Minimum']);
                    $rateLine->setMinimumBand3($rateline['d__Band3_Minimum']);
  
                    $rateLine->setMultiplier1Name($rateline['d__Multiplier1_Name']);
                    $rateLine->setMultiplier1AdmittedRate($rateline['d__Multiplier1_Rate_Admitted']);
                    $rateLine->setMultiplier1NonAdmittedRate($rateline['d__Multiplier1_Rate_NonAdmitted']);
                    $rateLine->setMultiplier2Name($rateline['d__Multiplier2_Name']);
                    $rateLine->setMultiplier2AdmittedRate($rateline['d__Multiplier2_Rate_Admitted']);
                    $rateLine->setMultiplier2NonAdmittedRate($rateline['d__Multiplier2_Rate_NonAdmitted']);
                    $rateLine->setMultiplier3Name($rateline['d__Multiplier3_Name']);
                    $rateLine->setMultiplier3AdmittedRate($rateline['d__Multiplier3_Rate_Admitted']);
                    $rateLine->setMultiplier3NonAdmittedRate($rateline['d__Multiplier3_Rate_NonAdmitted']);
                    $rateLine->setNonAdmittedRate($rateline['d__NonAdmittedRate']);
                    $rateLine->setNonAdmittedTaxPayableByInsuredAndAdminByInsurerOrAgent($rateline['d__NonAdmitted_TaxPayableByInsuredAndAdminByInsurerOrAgent']);
                    $rateLine->setNonAdmittedTaxPayableByInsuredLocally($rateline['d__NonAdmitted_TaxPayableByInsuredLocally']);
                    $rateLine->setNonAdmittedTaxPayableByInsurer($rateline['d__NonAdmitted_TaxPayableByInsurer']);
                    $rateLine->setNonAdmittedTaxPayablebyInsuredandAdministeredByInsurer($rateline['d__NonAdmitted_TaxPayablebyInsuredandAdministeredByInsurer']);
                    $rateLine->setNonFireElementRate($rateline['d__NonFireElementRate']);
                    
                    $rateLine->setTaxAdminister($rateline['d__TaxAdministeredBy']);
                    $rateLine->setTaxMaximum($rateline['d__TaxMaximum']);
                    $rateLine->setTaxMinimum($rateline['d__TaxMinimum']);
                    array_push($rateLineArray, $rateLine);
                }
                return $rateLineArray;
            }else{
                return $rateLineArray;
            }
            
        }catch (Exception $e) {
            throw new Exception($e->getMessage());
        }
    }
    /**
     * Get rateline array .
     * @param type ratelineobject,ratemasterId
     * @return array
     * @throws Exception 
     */
    public function getRateLineArray($rateLineData,$rateId){
        $resultArray = array();
        if(!empty($rateLineData)){
            foreach ($rateLineData as $rateline) {
                $ratelineArray  =   array();
                $ratelineArray['id'] = $rateline->getId();
                $ratelineArray['admittedRate'] = $rateline->getAdmittedRate();
                $ratelineArray['basisofCalculationName'] = $rateline->getBasisOfCalculationName();
                $ratelineArray['rateStaratDate'] = date('d/m/Y',strtotime($rateline->getRateEndDate()));
                $ratelineArray['rateendDate'] = date('d/m/Y',strtotime($rateline->getRateStartDate()));
                $ratelineArray['nonAdmittedRate'] = $rateline->getNonAdmittedRate();
                $resultArray[] = $ratelineArray;
            }
        }
       return $resultArray;
    }
    /**
     * Get array of rateline.
     * @param type $rateline
     * @return array
     * @throws Exception 
     */

    public function getArray() {
        
        $rateLine = array();
        $rateLine['d__RateStartDate'] = $this->rateStartDate;
        $rateLine['d__RateEndDate'] = $this->rateEndDate;
        $rateLine['d__Admitted_TaxPayableByInsuredAndAdminByInsurerOrAgent'] = $this->admittedTaxPayableByInsuredAndAdminByInsurerOrAgent;
        $rateLine['d__Admitted_TaxPayablebyInsuredandAdministeredByInsurer'] = $this->admittedTaxPayablebyInsuredandAdministeredByInsurer;
        $rateLine['d__Admitted_TaxPayableByInsuredLocally'] = $this->admittedTaxPayableByInsuredLocally;
        $rateLine['d__Admitted_TaxPayableByInsurer'] = $this->admittedTaxPayableByInsurer;
        $rateLine['d__AmountPerXValue'] = $this->amountPerXvalue;
        $rateLine['d__AmountPerX'] = $this->amountPerX;
        $rateLine['d__MaltaStampDuty_Premium_Level1'] = $this->maltaPremiumLevel1StampDuty;
        $rateLine['d__MaltaStampDuty_Premium_Level2'] = $this->maltaPremiumLevel2StampDuty;
        $rateLine['d__MaltaStampDuty_Premium_Level3'] = $this->maltaPremiumLevel3StampDuty;
        $rateLine['d__MaltaStampDuty_Premium_Level1_Rate'] = $this->maltaPremiumLevel1Rate;
        $rateLine['d__MaltaStampDuty_Premium_Level2_Rate'] = $this->maltaPremiumLevel2Rate;
        $rateLine['d__MaltaStampDuty_Premium_Level3_Rate'] = $this->maltaPremiumLevel3Rate;
        $rateLine['d__AdmittedRate'] = $this->admittedRate;      
        $rateLine['d__AdmittedRate_Band2'] = $this->band2AdmittedRate;
        $rateLine['d__AdmittedRate_Band3'] = $this->band3AdmittedRate;
        $rateLine['d__NonAdmittedRate_Band2'] = $this->band2NonAdmittedRate;
        $rateLine['d__NonAdmittedRate_Band3'] = $this->band3NonAdmittedRate;
        $rateLine['d__DomesticTransportationElement'] = $this->domesticTransportationElement;
        $rateLine['d__Authorised'] = $this->authorised;
        $rateLine['ID_BasisOfCalculation'] = $this->basisOfCalculation;
        $rateLine['d__NonAdmittedRate'] = $this->nonAdmittedRate;
        $rateLine['d__TaxMinimum'] = $this->taxMinimum;
        $rateLine['d__TaxMaximum'] = $this->taxMaximum;
        $rateLine['d__NonFireElementRate'] = $this->nonFireElementRate;
        $rateLine['d__InsuredResidenceApplicable'] = $this->insuredResidenceApplicable;
        $rateLine['d__DeMinimis_Enabled'] = $this->insuredResidenceApplicable;
        $rateLine['ID_RateAdditional'] = $this->additionalrateid;
        $rateLine['d__DeMinimis_Enabled'] = $this->deMinimisApplicable;
        $rateLine['d__DeMinimis_TotalPremiumThreshold'] = $this->deMinimisTotalPremiumThreshold;
        $rateLine['d__DeMinimis_PremiumAllocationThreshold'] = $this->deMinimisPremiumAllocationThreshold;
        $rateLine['d__MultiInsurerCalculationGroup'] = $this->multiInsuranceGroup;
        $rateLine['d__EconomicArea'] = $this->economicArea;
        $rateLine['d__BandApplyProportionately'] = $this->bandApplyProportionately;       
        $rateLine['d__InsuranceClass'] = $this->insuranceClass;
        $rateLine['d__LayeringPercentage'] = $this->layeringPercentage;
        $rateLine['d__Multiplier1_Name'] = $this->multiplier1Name;
        $rateLine['d__Multiplier2_Name'] = $this->multiplier2Name;
        $rateLine['d__Multiplier3_Name'] = $this->multiplier3Name;
        $rateLine['d__Multiplier1_Rate_Admitted'] = $this->multiplier1AdmittedRate;
        $rateLine['d__Multiplier1_Rate_NonAdmitted'] = $this->multiplier1NonAdmittedRate;
        $rateLine['d__Multiplier2_Rate_Admitted'] = $this->multiplier2AdmittedRate;
        $rateLine['d__Multiplier2_Rate_NonAdmitted'] = $this->multiplier2NonAdmittedRate;
        $rateLine['d__Multiplier3_Rate_Admitted'] = $this->multiplier3AdmittedRate;
        $rateLine['d__Multiplier3_Rate_NonAdmitted'] = $this->multiplier3NonAdmittedRate;
        $rateLine['d__NonAdmitted_TaxPayableByInsuredAndAdminByInsurerOrAgent'] = $this->nonAdmittedTaxPayableByInsuredAndAdminByInsurerOrAgent;
        $rateLine['d__NonAdmitted_TaxPayablebyInsuredandAdministeredByInsurer'] = $this->nonAdmittedTaxPayablebyInsuredandAdministeredByInsurer;
        $rateLine['d__NonAdmitted_TaxPayableByInsuredLocally'] = $this->nonAdmittedTaxPayableByInsuredLocally;
        $rateLine['d__NonAdmitted_TaxPayableByInsurer'] = $this->nonAdmittedTaxPayableByInsurer;
        $rateLine['d__TaxAdministeredBy'] = $this->taxAdminister;
        $rateLine['d__Band1_Maximum'] = $this->maximumBand1;
        $rateLine['d__Band2_Maximum'] = $this->maximumBand2;
        $rateLine['d__Band3_Maximum'] = $this->maximumBand3;
        $rateLine['d__Band1_Minimum'] = $this->minimumBand1;
        $rateLine['d__Band2_Minimum'] = $this->minimumBand2;
        $rateLine['d__Band3_Minimum'] = $this->minimumBand3;
        $rateLine['ID_RateLine'] = $this->id;
        $rateLine['ID_RateMaster'] = $this->rateMasterId;
        $rateLine['ID_Country'] = $this->countryId;
        $rateLine['ID_Currency'] = $this->currencyId;
        $rateLine['ID_Region'] = $this->regionId;
        
        return $rateLine;
    }
    /**
     * Get rateline object.
     * @param type rateline
     * @return rateline object
     * @throws Exception 
     */
    public function getRateLine(admin_Model_RateLine $rateline){
        if (null == $rateline) {
            throw new Exception("Invalid argument exception in edit rateline");
        }
        try{
            $rateDao = new admin_Model_RateLineDao();
            $rateLineData = $rateDao->getRateLine($rateline);
            if(!empty($rateLineData)){
                foreach($rateLineData as $rateDetails){
                    $rateline->setAdmittedRate($rateDetails['d__AdmittedRate']);
                    $rateline->setAdmittedTaxPayableByInsuredAndAdminByInsurerOrAgent($rateDetails['d__Admitted_TaxPayableByInsuredAndAdminByInsurerOrAgent']);
                    $rateline->setAdmittedTaxPayableByInsuredLocally($rateDetails['d__Admitted_TaxPayableByInsuredLocally']);
                    $rateline->setAdmittedTaxPayablebyInsuredandAdministeredByInsurer($rateDetails['d__Admitted_TaxPayablebyInsuredandAdministeredByInsurer']);
                    $rateline->setAdmittedTaxPayableByInsurer($rateDetails['d__Admitted_TaxPayableByInsurer']);
                    $rateline->setAuthorised($rateDetails['d__Authorised']);
                    $rateline->setAmountPerX($rateDetails['d__AmountPerX']);
                    $rateline->setAmountPerXvalue($rateDetails['d__AmountPerXValue']);
                    $rateline->setInsuredResidenceApplicable($rateDetails['d__InsuredResidenceApplicable']);
                    $rateline->setBand2AdmittedRate($rateDetails['d__AdmittedRate_Band2']);
                    $rateline->setBand2NonAdmittedRate($rateDetails['d__NonAdmittedRate_Band2']);
                    $rateline->setBand3AdmittedRate($rateDetails['d__AdmittedRate_Band3']);
                    $rateline->setBand3NonAdmittedRate($rateDetails['d__NonAdmittedRate_Band3']);
                    $rateline->setBandApplyProportionately($rateDetails['d__BandApplyProportionately']);
                    $rateline->setBasisOfCalculation($rateDetails['ID_BasisOfCalculation']);
                    $rateline->setCountryId((integer)$rateDetails['ID_Country']);
                    $rateline->setCurrencyId((integer)$rateDetails['ID_Currency']);
                    $rateline->setDeMinimisApplicable($rateDetails['d__DeMinimis_Enabled']);
                    $rateline->setDeMinimisPremiumAllocationThreshold($rateDetails['d__DeMinimis_PremiumAllocationThreshold']);
                    $rateline->setDeMinimisTotalPremiumThreshold($rateDetails['d__DeMinimis_TotalPremiumThreshold']);
                    $rateline->setMultiInsuranceGroup($rateDetails['d__MultiInsurerCalculationGroup']);
                    $rateline->setAdditionalRateId($rateDetails['ID_RateAdditional']);
                    $rateline->setDomesticTransportationElement($rateDetails['d__DomesticTransportationElement']);
                    $rateline->setInsuranceClassId((integer)$rateDetails['ID_InsuranceClass']);
                    $rateline->setLayeringPercentage($rateDetails['d__LayeringPercentage']);
                    $rateline->setMaltaPremiumLevel1Rate($rateDetails['d__MaltaStampDuty_Premium_Level1_Rate']);
                    $rateline->setMaltaPremiumLevel1StampDuty($rateDetails['d__MaltaStampDuty_Premium_Level1']);
                    $rateline->setMaltaPremiumLevel2Rate($rateDetails['d__MaltaStampDuty_Premium_Level2_Rate']);
                    $rateline->setMaltaPremiumLevel2StampDuty($rateDetails['d__MaltaStampDuty_Premium_Level2']);
                    $rateline->setMaltaPremiumLevel3Rate($rateDetails['d__MaltaStampDuty_Premium_Level3_Rate']);
                    $rateline->setMaltaPremiumLevel3StampDuty($rateDetails['d__MaltaStampDuty_Premium_Level3']);
                    $rateline->setMaximumBand1($rateDetails['d__Band1_Maximum']);
                    $rateline->setMaximumBand2($rateDetails['d__Band2_Maximum']);
                    $rateline->setMaximumBand3($rateDetails['d__Band3_Maximum']);
                    $rateline->setMinimumBand1($rateDetails['d__Band1_Minimum']);
                    $rateline->setMinimumBand2($rateDetails['d__Band2_Minimum']);
                    $rateline->setMinimumBand3($rateDetails['d__Band3_Minimum']);
                    $rateline->setModifiedDate(date('Y-m-d'));
                    $rateline->setMultiplier1Name($rateDetails['d__Multiplier1_Name']);
                    $rateline->setMultiplier1AdmittedRate($rateDetails['d__Multiplier1_Rate_Admitted']);
                    $rateline->setMultiplier1NonAdmittedRate($rateDetails['d__Multiplier1_Rate_NonAdmitted']);
                    $rateline->setMultiplier2Name($rateDetails['d__Multiplier2_Name']);
                    $rateline->setMultiplier2AdmittedRate($rateDetails['d__Multiplier2_Rate_Admitted']);
                    $rateline->setMultiplier2NonAdmittedRate($rateDetails['d__Multiplier2_Rate_NonAdmitted']);
                    $rateline->setMultiplier3Name($rateDetails['d__Multiplier3_Name']);
                    $rateline->setMultiplier3AdmittedRate($rateDetails['d__Multiplier3_Rate_Admitted']);
                    $rateline->setMultiplier3NonAdmittedRate($rateDetails['d__Multiplier3_Rate_NonAdmitted']);
                    $rateline->setNonAdmittedRate($rateDetails['d__NonAdmittedRate']);
                    $rateline->setNonAdmittedTaxPayableByInsuredAndAdminByInsurerOrAgent($rateDetails['d__NonAdmitted_TaxPayableByInsuredAndAdminByInsurerOrAgent']);
                    $rateline->setNonAdmittedTaxPayableByInsuredLocally($rateDetails['d__NonAdmitted_TaxPayableByInsuredLocally']);
                    $rateline->setNonAdmittedTaxPayableByInsurer($rateDetails['d__NonAdmitted_TaxPayableByInsurer']);
                    $rateline->setNonAdmittedTaxPayablebyInsuredandAdministeredByInsurer($rateDetails['d__NonAdmitted_TaxPayablebyInsuredandAdministeredByInsurer']);
                    $rateline->setNonFireElementRate($rateDetails['d__NonFireElementRate']);
                    $rateline->setRateEndDate($rateDetails['d__RateEndDate']);
                    $rateline->setRateStartDate($rateDetails['d__RateStartDate']);
                    $rateline->setRegionId((integer)$rateDetails['ID_Region']);
                    $rateline->setTaxAdminister($rateDetails['d__TaxAdministeredBy']);
                    $rateline->setTaxMaximum($rateDetails['d__TaxMaximum']);
                    $rateline->setTaxMinimum($rateDetails['d__TaxMinimum']);
                
                }  
                return $rateline;
            }else{
                return false;
            }
                
            
        }catch (Exception $e) {
            throw new Exception($e->getMessage());
        }
    }
    
     /**
     * Delete rateline
     * @param ratelineId
     * @return result
     *
     */
     public function deleteRateline($ratelineId){
         if(!is_int($ratelineId)){
             throw new Exeception("Invalid argument exception in deleterateline");
         }else{
             $rateline = new admin_Model_RateLineDao();
             $result = $rateline->deleteRateline($ratelineId);
             return $result;
         }
     }

     /**
     * Get rateline json data .
     * @param type rateline object
     * @return json
     *
     */
    
    public static function getjson(admin_Model_RateLine $rateline){
        $dataArray = array();
        if($rateline!=null){
            $dataArray['admittedRate'] = $rateline->getAdmittedRate();
            $dataArray['admittedPayInsurerOrAgent'] = $rateline->getAdmittedTaxPayableByInsuredAndAdminByInsurerOrAgent();
            $dataArray['admittedPayInsurerLocally'] = $rateline->getAdmittedTaxPayableByInsuredLocally();
            $dataArray['admittedPayInsurer'] = $rateline->getAdmittedTaxPayableByInsurer();
            $dataArray['admittedPayAdminsteredInsurer'] = $rateline->getAdmittedTaxPayablebyInsuredandAdministeredByInsurer();
            $dataArray['amountPerX'] = $rateline->getAmountPerX();
            $dataArray['amountPerXvalue'] = $rateline->getAmountPerXvalue();
            $dataArray['band2Admitted'] = $rateline->getBand2AdmittedRate();
            $dataArray['band3Admitted'] = $rateline->getBand3AdmittedRate();
            $dataArray['band2Nonadmitted'] = $rateline->getBand2NonAdmittedRate();
            $dataArray['band3Nonadmitted'] = $rateline->getBand3NonAdmittedRate();
            $dataArray['proportionality'] = $rateline->getBandApplyProportionately();
            $dataArray['basisofCalculation'] = $rateline->getBasisOfCalculation();
            $dataArray['country'] = $rateline->getCountryId();
            $dataArray['currency'] = $rateline->getCurrencyId();
            $dataArray['region'] = $rateline->getRegionId();
            $dataArray['deminimisApplicable'] = $rateline->getDeMinimisApplicable();
            $dataArray['deminimisAllocationThreshold'] = $rateline->getDeMinimisPremiumAllocationThreshold();
            $dataArray['deminimisTotalThreshold'] = $rateline->getDeMinimisTotalPremiumThreshold();
            $dataArray['multiinsurerGroup'] = $rateline->getMultiInsuranceGroup();
            $dataArray['additionalRateId'] = $rateline->getAdditionalRateId();
            $dataArray['domestictransportationElement'] = $rateline->getDomesticTransportationElement();
            $dataArray['ratelineId'] = $rateline->getId();
            $dataArray['insuranceclass'] = $rateline->getInsuranceClass();
            $dataArray['residanceApplicable'] = $rateline->getInsuredResidenceApplicable();
            $dataArray['layeringPercentage'] = $rateline->getLayeringPercentage();
            $dataArray['maltaPremiumLevel1'] = $rateline->getMaltaPremiumLevel1StampDuty();
            $dataArray['maltaLevel1StampDuty'] = $rateline->getMaltaPremiumLevel1Rate();
            $dataArray['maltaPremiumLevel2'] = $rateline->getMaltaPremiumLevel2StampDuty();
            $dataArray['maltaLevel2StampDuty'] = $rateline->getMaltaPremiumLevel2Rate();
            $dataArray['maltaPremiumLevel3'] = $rateline->getMaltaPremiumLevel3StampDuty();
            $dataArray['maltaLevel3StampDuty'] = $rateline->getMaltaPremiumLevel3Rate();
            $dataArray['maximumBand1'] = $rateline->getMaximumBand1();
            $dataArray['maximumBand2'] = $rateline->getMaximumBand2();
            $dataArray['maximumBand3'] = $rateline->getMaximumBand3();
            $dataArray['minimumBand1'] = $rateline->getMinimumBand1();
            $dataArray['minimumBand2'] = $rateline->getMinimumBand2();
            $dataArray['minimumBand3'] = $rateline->getMinimumBand3();
            $dataArray['multiplier1AdmittedRate'] = $rateline->getMultiplier1AdmittedRate();
            $dataArray['multiplier1NonAdmittedRate'] = $rateline->getMultiplier1NonAdmittedRate();
            $dataArray['multiplier1Name'] = $rateline->getMultiplier1Name();
            $dataArray['multiplier2AdmittedRate'] = $rateline->getMultiplier2AdmittedRate();
            $dataArray['multiplier2NonAdmittedRate'] = $rateline->getMultiplier2NonAdmittedRate();
            $dataArray['multiplier2Name'] = $rateline->getMultiplier2Name();
            $dataArray['multiplier3AdmittedRate'] = $rateline->getMultiplier3AdmittedRate();
            $dataArray['multiplier3NonAdmittedRate'] = $rateline->getMultiplier3NonAdmittedRate();
            $dataArray['multiplier3Name'] = $rateline->getMultiplier3Name();
            $dataArray['nonAdmittedRate'] = $rateline->getNonAdmittedRate();
            $dataArray['nonAdmittedPayInsurerOrAgent'] = $rateline->getNonAdmittedTaxPayableByInsuredAndAdminByInsurerOrAgent();
            $dataArray['nonAdmittedPayInsurerLocally'] = $rateline->getNonAdmittedTaxPayableByInsuredLocally();
            $dataArray['nonAdmittedPayInsurer'] = $rateline->getNonAdmittedTaxPayableByInsurer();
            $dataArray['nonAdmittedPayAdminsteredInsurer'] = $rateline->getNonAdmittedTaxPayablebyInsuredandAdministeredByInsurer();
            $dataArray['nonFireElementARate'] = $rateline->getNonFireElementRate();
            $dataArray['rateEndDate'] = date('m/d/Y',strtotime($rateline->getRateEndDate()));
            $dataArray['rateId'] = $rateline->getRateMasterId();
            $dataArray['rateStartDate'] = date('m/d/Y',strtotime($rateline->getRateStartDate()));
            $dataArray['taxAdminister'] = $rateline->getTaxAdminister();
            $dataArray['taxMaximum'] = $rateline->getTaxMaximum();
            $dataArray['taxMinimum'] = $rateline->getTaxMinimum();
            $dataArray['status'] = 1;
        }
        else{
            $dataArray['status'] = 0;
        }
        
        return Zend_Json::encode($dataArray);
    }
}

?>
