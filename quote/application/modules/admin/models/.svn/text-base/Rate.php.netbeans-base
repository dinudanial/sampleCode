<?php

class admin_Model_Rate {

    private $id;
    private $taxType;
    private $region;
    private $country;
    private $countryName;
    private $currency;
    private $insuranceClass;
    private $insuranceClassName;
    private $taxSubClass;
    private $tertiry;
    private $defaultSubClass;
    private $autoCreate;

    public function getId() {
        return $this->id;
    }

    public function setId($id) {
        if (!is_int($id)) {
            throw new Exception("Invalid argument exception in setId");
        }
        $this->id = $id;
    }

    public function getTaxType() {
        return $this->taxType;
    }

    public function setTaxType($taxType) {
        $this->taxType = $taxType;
    }

    public function getRegion() {
        return $this->region;
    }

    public function setRegion($region) {
        if (!is_int($region)) {
            throw new Exception("Invalid argument exception in setRegion");
        }
        $this->region = $region;
    }

    public function getCountry() {
        return $this->country;
    }

    public function setCountry($country) {
        if (!is_int($country)) {
            throw new Exception("Invalid argument exception in setCountry");
        }
        $this->country = $country;
    }
    
	public function getCountryName() {
        return $this->countryName;
    }

    public function setCountryName($countryName) {
        $this->countryName = $countryName;
    }

    public function getCurrency() {
        return $this->currency;
    }

    public function setCurrency($currency) {
        if (!is_int($currency)) {
            throw new Exception("Invalid argument exception in setCurrency");
        }
        $this->currency = $currency;
    }

    public function getInsuranceClass() {
        return $this->insuranceClass;
    }

    public function setInsuranceClass($insuranceClass) {
        if (!is_int($insuranceClass)) {
            throw new Exception("Invalid argument exception in setInsuranceClass");
        }
        $this->insuranceClass = $insuranceClass;
    }
    
   public function getInsuranceClassName() {
        return $this->insuranceClassName;
    }

    public function setInsuranceClassName($insuranceClassName) {
        $this->insuranceClassName = $insuranceClassName;
    }
    

    public function getTaxSubClass() {
        return $this->taxSubClass;
    }

    public function setTaxSubClass($taxSubClass) {
        $this->taxSubClass = $taxSubClass;
    }

    public function getTertiry() {
        return $this->tertiry;
    }

    public function setTertiry($tertiry) {
        $this->tertiry = $tertiry;
    }

    public function getDefaultSubClass() {
        return $this->defaultSubClass;
    }

    public function setDefaultSubClass($defaultSubClass) {
        if (!is_int($defaultSubClass)) {
            throw new Exception("Invalid argument exception in setDefaultSubClass");
        }
        $this->defaultSubClass = $defaultSubClass;
    }

    public function getAutoCreate() {
        return $this->autoCreate;
    }

    public function setAutoCreate($autoCreate) {
        $this->autoCreate = $autoCreate;
    }

    /**
     * Return list of rate objects corrsponding to the filter options supplied.
     * @param array $filter
     * @return array $rateList
     * @throws Exception 
     */
    public function find(array $filter) {
        if (empty($filter) || empty($filter['region']) || empty($filter['country'])) {
            throw new Exception("Invalid argument exception in find rates!");
        }
        try {
            $rateDao = new admin_Model_RateDao();
            $rates = $rateDao->getRates($filter);
            if ($rates) {
                $rateList = array();
                foreach ($rates as $r) {
                    $rate = new admin_Model_Rate();
                    $rate->setAutoCreate($r['d__NoAutoCreate']);
                    $rate->setCountry((integer)$r['ID_Country']);
                    $rate->setCountryName($r['d__CountryName']);
                    $rate->setCurrency((integer)$r['ID_Currency']);
                    $rate->setDefaultSubClass((integer)$r['d__DefaultSubClass']);
                    $rate->setId((integer)$r['ID_RateMaster']);
                    $rate->setInsuranceClass((integer)$r['ID_InsuranceClass']);
                    $rate->setInsuranceClassName($r['d__InsuranceClass']);
                    $rate->setRegion((integer)$r['ID_Region']);
                    $rate->setTaxSubClass($r['d__TaxSubClass']);
                    $rate->setTaxType($r['d__TypeOfTax']);
                    array_push($rateList, $rate);
                }

                return $rateList;
            } else {
                throw new Exception("Empty data set!");
            }
        } catch (Exception $e) {
            throw new Exception($e->getMessage());
        }
    }
    /**
     * Save a new rate object / edit exisitng rate object.
     * @param admin_Model_Rate $rate
     * @return Boolean $status
     * @throws Exception 
     */
    public function saveRate(admin_Model_Rate $rate) {
        if (null == $rate) {
            throw new Exception('Invalid argument exception in saveRate!');
        }
        try {
            $rateDetails = array();
            $status = false;
            $r = new admin_Model_RateDao();
            $rateDetails['d__TypeOfTax'] = $rate->getTaxType();
            $rateDetails['ID_Region'] = $rate->getRegion();
            $rateDetails['ID_Country'] = $rate->getCountry();
            $rateDetails['ID_Currency'] = $rate->getCurrency();
            $rateDetails['ID_InsuranceClass'] = $rate->getInsuranceClass();
            $rateDetails['d__TaxSubClass'] = $rate->getTaxSubClass();
            $rateDetails['d__TertiaryClass'] = $rate->getTertiry();
            $rateDetails['d__NoAutoCreate'] = $rate->getAutoCreate();
            if ($rate->getId()) {
                $rateDetails['ID_RateMaster'] = $rate->getId();
                $status = $r->editRate($rateDetails);
            } else {
                $status = $r->saveRate($rateDetails);
            }      
            return $status;         
        } catch (Exception $e) {
            throw new Exception($e->getMessage());
        }
    }
    /**
     * Return rate object corresponding to the ratemasterID
     *@param rateId
     * @return Rate object
     * @throws Exception 
     */
    public function findRate($rateId){
    	if (!$rateId || !is_int($rateId)) {
	         throw new Exception("Invalid argument exception in edit rates!");
	    }
	    try{
	    	$r = new admin_Model_RateDao();
	    	$rateDetails = $r->findRate($rateId);
	    	if(!empty($rateDetails)){
	    		$rate = new admin_Model_Rate();
	    		foreach ($rateDetails as $rateData){
	    			$rate->setAutoCreate($rateData['d__NoAutoCreate']);
		            $rate->setCountry((integer)$rateData['ID_Country']);
		            $rate->setCountryName($rateData['d__CountryName']);
		            $rate->setCurrency((integer)$rateData['ID_Currency']);
		            $rate->setDefaultSubClass((integer)$rateData['d__DefaultSubClass']);
		            $rate->setId((integer)$rateData['ID_RateMaster']);
		            $rate->setInsuranceClass((integer)$rateData['ID_InsuranceClass']);
		            $rate->setInsuranceClassName($rateData['d__InsuranceClass']);
		            $rate->setRegion((integer)$rateData['ID_Region']);
		            $rate->setTaxSubClass($rateData['d__TaxSubClass']);
		            $rate->setTaxType($rateData['d__TypeOfTax']);
	    		}
	            return $rate;
	    	}else{
	    		throw new Exception("Empty data set!");
	    	}
	    }catch (Exception $e) {
            throw new Exception($e->getMessage());
        }
    }
 /**
     * Converts rate object to json.
     * @param admin_Model_Rate $r
     * @return json 
     */
	public static function getJson(admin_Model_Rate $r){
	        
	        $rate = array();
	        $rate['id'] = $r->getId();
	        $rate['taxType'] = $r->getTaxType();
	        $rate['region'] = $r->getRegion();
	        $rate['country'] = $r->getCountry();
	        $rate['countryName'] = $r->getCountryName();
	        $rate['currency'] = $r->getCurrency();
	        $rate['insuranceClass'] = $r->getInsuranceClass();
	        $rate['insuranceClassName'] = $r->getInsuranceClassName();
	        $rate['taxSubClass'] = $r->getTaxSubClass();
	        $rate['tertiry'] = $r->getTertiry();
	        $rate['defaultSubClass'] = $r->getDefaultSubClass();
	        $rate['autoCreate'] = $r->getAutoCreate();
	        return Zend_Json::encode($rate);
	    }

}

