<?php

class admin_Model_Rate {

    private $id;
    private $taxType;
    private $region;
    private $regionName;
    private $country;
    private $countryName;
    private $currency;
    private $currencyName;
    private $insuranceClass;
    private $insuranceClassName;
    private $taxSubClass;
    private $tertiry;
    private $defaultSubClass;
    private $autoCreate;
    private $rateLines;

    public function getId() {
        return $this->id;
    }

    public function setId($id) {
        if (!is_int($id)) {
            throw new Exception("Invalid argument exception in setId");
        }
        $this->id = $id;
    }

    public function getTaxType() {
        return $this->taxType;
    }

    public function setTaxType($taxType) {
        $this->taxType = $taxType;
    }

    public function getRegion() {
        return $this->region;
    }

    public function setRegion($region) {
        if (!is_int($region)) {
            throw new Exception("Invalid argument exception in setRegion");
        }
        $this->region = $region;
    }
    
     public function getRegionName() {
        return $this->regionName;
    }

    public function setRegionName($regionName) {
        $this->regionName = $regionName;
    }

    public function getCountry() {
        return $this->country;
    }

    public function setCountry($country) {
        if (!is_int($country)) {
            throw new Exception("Invalid argument exception in setCountry");
        }
        $this->country = $country;
    }

    public function getCountryName() {
        return $this->countryName;
    }

    public function setCountryName($countryName) {
        $this->countryName = $countryName;
    }

    public function getCurrency() {
        return $this->currency;
    }

    public function setCurrency($currency) {
        if (!is_int($currency)) {
            throw new Exception("Invalid argument exception in setCurrency");
        }
        $this->currency = $currency;
    }
    
     public function getCurrencyName() {
        return $this->currencyName;
    }

    public function setCurrencyName($currencyName) {
        $this->currencyName = $currencyName;
    }

    public function getInsuranceClass() {
        return $this->insuranceClass;
    }

    public function setInsuranceClass($insuranceClass) {
        if (!is_int($insuranceClass)) {
            throw new Exception("Invalid argument exception in setInsuranceClass");
        }
        $this->insuranceClass = $insuranceClass;
    }

    public function getInsuranceClassName() {
        return $this->insuranceClassName;
    }

    public function setInsuranceClassName($insuranceClassName) {
        $this->insuranceClassName = $insuranceClassName;
    }

    public function getTaxSubClass() {
        return $this->taxSubClass;
    }

    public function setTaxSubClass($taxSubClass) {
        $this->taxSubClass = $taxSubClass;
    }

    public function getTertiry() {
        return $this->tertiry;
    }

    public function setTertiry($tertiry) {
        $this->tertiry = $tertiry;
    }

    public function getDefaultSubClass() {
        return $this->defaultSubClass;
    }

    public function setDefaultSubClass($defaultSubClass) {
        if (!is_int($defaultSubClass)) {
            throw new Exception("Invalid argument exception in setDefaultSubClass");
        }
        $this->defaultSubClass = $defaultSubClass;
    }

    public function getAutoCreate() {
        return $this->autoCreate;
    }

    public function setAutoCreate($autoCreate) {
        $this->autoCreate = $autoCreate;
    }

    public function getRateLines() {
        return $this->rateLines;
    }

    public function setRateLines(array $rateLines) {
        $this->rateLines = $rateLines;
    }

    /**
     * Return list of rate objects corrsponding to the filter options supplied.
     * @param array $filter
     * @return array $rateList
     * @throws Exception 
     */
    public function find(array $filter) {
        if (empty($filter) || empty($filter['region']) || empty($filter['country'])) {
            throw new Exception("Invalid argument exception in find rates!");
        }
        try {
            $rateDao = new admin_Model_RateDao();
            $rates = $rateDao->getRates($filter);
            if ($rates) {
                $rateList = array();
                foreach ($rates as $r) {
                    $rate = new admin_Model_Rate();
                    $rate->setAutoCreate($r['d__NoAutoCreate']);
                    $rate->setCountry((integer) $r['ID_Country']);
                    $rate->setCountryName($r['d__CountryName']);
                    $rate->setRegionName($r['d__RegionName']);
                    $rate->setCurrency((integer) $r['ID_Currency']);
                    $rate->setCurrencyName($r['d__CurrencyName']);
                    $rate->setDefaultSubClass((integer) $r['d__DefaultSubClass']);
                    $rate->setId((integer) $r['ID_RateMaster']);
                    $rate->setInsuranceClass((integer) $r['ID_InsuranceClass']);
                    $rate->setInsuranceClassName($r['d__InsuranceClass']);
                    $rate->setTaxSubClass($r['d__TaxSubClass']);
                    $rate->setTaxType($r['d__TypeOfTax']);
                    $rate->setTertiry($r['d__TertiaryClass']);
                    array_push($rateList, $rate);
                }

                return $rateList;
            } else {
            	 return $rateList['erorr'] = "Empty data set!";
                //throw new Exception("Empty data set!");
            }
        } catch (Exception $e) {
            throw new Exception($e->getMessage());
        }
    }

    /**
     * Save a new rate object / edit exisitng rate object.
     * @param admin_Model_Rate $rate
     * @return Boolean $status
     * @throws Exception 
     */
    public function saveRate(admin_Model_Rate $rate) {
        if (null == $rate) {
            throw new Exception('Invalid argument exception in saveRate!');
        }
        try {
            $rateDetails = array();
            $status = false;
            $r = new admin_Model_RateDao();
            $rateDetails['d__TypeOfTax'] = $rate->getTaxType();
            $rateDetails['ID_Country'] = $rate->getCountry();
            $rateDetails['ID_Currency'] = $rate->getCurrency();
            $rateDetails['ID_InsuranceClass'] = $rate->getInsuranceClass();
            $rateDetails['d__TaxSubClass'] = $rate->getTaxSubClass();
            $rateDetails['d__TertiaryClass'] = $rate->getTertiry();
            $rateDetails['d__NoAutoCreate'] = $rate->getAutoCreate();
            //echo "<pre>";
            //print_r($rateDetails);exit;
            if ($rate->getId()) {
                $rateDetails['ID_RateMaster'] = $rate->getId();
                $status = $r->editRate($rateDetails);
            } else {
                $status = $r->saveRate($rateDetails);
            }
            return $status;
        } catch (Exception $e) {
            throw new Exception($e->getMessage());
        }
    }
    /**
     * Delete Rate.
     * @param rateId
     * @return status 
     * @throws Exception 
     */
    public function deleteRate($rateId){
        if(!is_int($rateId))
        {
             throw new Exception('Invalid argument exception in deleteRate!');
        }else{
             try{
                $config = new Zend_Config_Ini(APPLICATION_PATH . '/configs/application.ini', 'production');
                $dbConfig = $config->get("resources")->get("db")->get("params");
                $db = new Zend_Db_Adapter_Pdo_Mysql(array(
                        'host' => $dbConfig->host,
                        'username' => $dbConfig->username,
                        'password' => $dbConfig->password,
                        'dbname' => $dbConfig->dbname
                ));
               $db->beginTransaction();
               try
                {
                    $where['ID_RateMaster = ?'] = $rateId;
                    $db->delete('RateMaster',$where);
                    $db->delete('Rateline',$where);                        
                    $db->commit();
                    return true;
                }
                catch( Exception $e )
                {
                    $db->rollBack();
                }

                
            }  catch (exception $e){
                 throw new Exception($e->getMessage());
            }
        }        
        
    }

    /**
     * Return rate object corresponding to the ratemasterID
     * @param rateId
     * @return Rate object
     * @throws Exception 
     */
    public function findRate($rateId){
    	if (!$rateId || !is_int($rateId)) {
	         throw new Exception("Invalid argument exception in edit rates!");
	    }
	    try{
	    	$r = new admin_Model_RateDao();
	    	$rateDetails = $r->findRate($rateId);
	    	if(!empty($rateDetails)){
	    		$rate = new admin_Model_Rate();
	    		foreach ($rateDetails as $rateData){
                            $rate->setAutoCreate($rateData['d__NoAutoCreate']);
		            $rate->setCountry((integer)$rateData['ID_Country']);
		            $rate->setCountryName($rateData['d__CountryName']);
		            $rate->setCurrency((integer)$rateData['ID_Currency']);		            
		            $rate->setId((integer)$rateData['ID_RateMaster']);
		            $rate->setInsuranceClass((integer)$rateData['ID_InsuranceClass']);
		            $rate->setInsuranceClassName($rateData['d__InsuranceClass']);
		            $rate->setTertiry($rateData['d__TertiaryClass']);
		            $rate->setRegion((integer)$rateData['ID_Region']);
		            $rate->setTaxSubClass($rateData['d__TaxSubClass']);
		            $rate->setTaxType($rateData['d__TypeOfTax']);
	    		}
                    $rateDefault = $r->findDefaultSubclass($rate->getArray($rate));
                    if($rateDefault)
                        $rate->setDefaultSubClass((integer)$rateDefault[0]['ID_RateMaster']);
	            return $rate;
	    	}else{
	    		throw new Exception("Empty data set!");
	    	}
	    }catch (Exception $e) {
            throw new Exception($e->getMessage());
        }
    }
    /**
     * Find subclass of a rate
     * @param array $dataArray
     * @return array of subclass
     * @throws Exception
     */
    public function findDefaultSubclass(array $dataArray){
    	if (empty($dataArray)) {
            throw new Exception("Invalid argument exception in find rateSubclass!");
        }
        try{
        	$ratedao = new admin_Model_RateDao();
        	$result = $ratedao->findRateSubclass($dataArray);
        	return $result;
   
        }catch(Exception $e){
        	throw new Exception("Empty data set!");
        }
    }
    /**
     *Set default rate subclass
     * @param quoteId
     * @return true/false
     * @throws Exception  
     */
    public function saveDefaultSubClass($quoteId,$subclass){
        if(!is_int($quoteId)){
            throw new Exception("Invalid argument exception in RateId!");
        }
        try{
            $rateDao = new admin_Model_RateDao();
            $sublassData = $rateDao->saveDefaultSubclass($quoteId,$subclass);
            return $sublassData;
        }catch(Exception $e){
        	throw new Exception("Erorr in defaultsubclass save!");
        }
    }
    /**
     *Remove default subclass 
     * @param rateId
     * @return true/false
     * @throws Exception  
     */
    public function removeDefaultSubclass($rateId){
        if(!is_int($rateId)){
            throw new Exception("Invalid argument exception in RateId!");
        }
        try{
            $rateDao = new admin_Model_RateDao();
            $result = $rateDao->updateDefaultSubclass($rateId);
            return $result;
        }catch(Exception $e){
        	throw new Exception("Erorr in defaultsubclass remove!");
        }
    }

    /**
     * Converts rate object to Array.
     * @param admin_Model_Rate $r
     * @return array 
     */
    public function getRateArray(admin_Model_Rate $r){
        $rate = array();
        $rate['id'] = $r->getId();
        $rate['taxType'] = $r->getTaxType();
        $rate['region'] = $r->getRegion();
        $rate['country'] = $r->getCountry();
        $rate['countryName'] = $r->getCountryName();
        $rate['currency'] = $r->getCurrency();
        $rate['insuranceClass'] = $r->getInsuranceClass();
        $rate['insuranceClassName'] = $r->getInsuranceClassName();
        $rate['taxSubClass'] = $r->getTaxSubClass();
        $rate['tertiry'] = $r->getTertiry();
        $rate['defaultSubClass'] = $r->getDefaultSubClass();
        $rate['autoCreate'] = $r->getAutoCreate();
        return $rate;
    }

    /**
     * Converts rate object to json.
     * @param admin_Model_Rate $r
     * @return json 
     */
    public static function getJson(admin_Model_Rate $r) {

        $rate = array();
        $rate['id'] = $r->getId();
        $rate['taxType'] = $r->getTaxType();
        $rate['region'] = $r->getRegion();
        $rate['country'] = $r->getCountry();
        $rate['countryName'] = $r->getCountryName();
        $rate['currency'] = $r->getCurrency();
        $rate['insuranceClass'] = $r->getInsuranceClass();
        $rate['insuranceClassName'] = $r->getInsuranceClassName();
        $rate['taxSubClass'] = $r->getTaxSubClass();
        $rate['tertiry'] = $r->getTertiry();
        $rate['defaultSubClass'] = $r->getDefaultSubClass();
        $rate['autoCreate'] = $r->getAutoCreate();
        return Zend_Json::encode($rate);
    }
	/**
	 * Convert ratesubclass to json 
	 * @param array $subclass
	 * @return json
	 */
    public static function getJsonRateSubclass($subclass){
    	$defaultSubclass = array();
    	$defaultSubclass['country'] = $subclass['d__CountryName'];
    	$defaultSubclass['rateMasterId'] = $subclass['ID_RateMaster'];
    	$defaultSubclass['defaultSubclass'] = $subclass['d__DefaultSubClass'];
    	$defaultSubclass['typeOfTax'] = $subclass['d__TypeOfTax'];
    	$defaultSubclass['taxSubclass'] = $subclass['d__TaxSubClass'];
    	$defaultSubclass['insuranceclass'] = $subclass['d__InsuranceClass'];
        $defaultSubclass['tertiary'] = $subclass['tertiaryClass'];
    	return Zend_Json::encode($defaultSubclass);
    }
         /**
	 * Convert rates object to array 
	 * @param object rate
	 * @return array
	 */
    public static function getArray(admin_Model_Rate $rate){
    	$findSubclass = array();
    	$findSubclass['country'] = $rate->getCountry();
    	$findSubclass['currency'] = $rate->getCurrency();
    	$findSubclass['insuranceclass'] = $rate->getInsuranceClass();
    	$findSubclass['typeOfTax'] = $rate->getTaxType();
    	return $findSubclass;
    }
    
    public function duplicateRate(admin_Model_Rate $rate){
        if(null==$rate){
            throw new Exception("Invalid arument exception in duplicate rate!");
        }else{
            try{
                $config = new Zend_Config_Ini(APPLICATION_PATH . '/configs/application.ini', 'production');
                $dbConfig = $config->get("resources")->get("db")->get("params");
                $db = new Zend_Db_Adapter_Pdo_Mysql(array(
                        'host' => $dbConfig->host,
                        'username' => $dbConfig->username,
                        'password' => $dbConfig->password,
                        'dbname' => $dbConfig->dbname
                ));
               $db->beginTransaction();
               try
                {
                    $rateMasterId = '';
                    $select = $db->select()
                                ->from(array('RateMaster'),array('ID_InsuranceClass',
                                    'ID_Currency', 'ID_Country', 'd__ObsoleteRatec',
                                    'd__InsuredResidenceApplicable', 'd__DefaultSubClass',
                                    's__CreationAccount', 'd__TypeOfTax','d__TertiaryClass', 
                                    'd__TaxSubClass', 'd__NoAutoCreate'))
                                ->where( 'ID_RateMaster = ?', $rate->getId());

                    $stmt = $select->query();
                    $rows = $stmt->fetchAll(); 
                    if(count($rows)>0){
                         $db->insert('RateMaster', $rows[0]);
                         $rateMasterId=$db->lastInsertId();                     
                    }
                        
                    
                    $rateLine = $db->select()
                         ->from(array('Rateline'),array('d__Admitted_TaxPayableByInsuredAndAdminByInsurerOrAgent','d__Admitted_TaxPayablebyInsuredandAdministeredByInsurer','d__Admitted_TaxPayableByInsuredLocally',
                                'd__Admitted_TaxPayableByInsurer','d__AdmittedRate','d__AdmittedRate_Band2','d__AdmittedRate_Band3',
                                'd__Authorised','d__BandApplyProportionately','d__DeMinimis_Enabled','d__EconomicArea','d__Layering',
                                'd__LayeringPercentage','d__Multiplier1_Name','d__Multiplier2_Name','d__Multiplier3_Name',
                                'd__NoAutoCreate','d__NonAdmitted_TaxPayableByInsuredAndAdminByInsurerOrAgent','d__NonAdmitted_TaxPayablebyInsuredandAdministeredByInsurer',
                                'd__NonAdmitted_TaxPayableByInsuredLocally','d__NonAdmitted_TaxPayableByInsurer','d__ObsoleteRate',
                                'd__RateNotes','d__TaxAdministeredBy','d__TaxBorneBy','s__CreationAccount','s__ModificationAccount',
                                'd__AmountPerDocument','d__AmountPerPersonInsured','d__AmountPerPolicy','d__AmountPerX','d__AmountPerXValue',
                                'd__Band1_Maximum','d__Band1_Minimum','d__Band2_Maximum','d__Band2_Minimum','d__Band3_Maximum',
                                'd__Band3_Minimum','d__DefaultSubClass','d__DeMinimis_PremiumAllocationThreshold','d__DeMinimis_TotalPremiumThreshold',
                                'd__DomesticTransportationElement','d__InsuredResidenceApplicable','d__MaltaStampDuty_Premium_Level1',
                                'd__MaltaStampDuty_Premium_Level1_Rate','d__MaltaStampDuty_Premium_Level2','d__MaltaStampDuty_Premium_Level2_Rate',
                                'd__MaltaStampDuty_Premium_Level3','d__MaltaStampDuty_Premium_Level3_Rate','d__MultiInsurerCalculationGroup',
                                'd__Multiplier1_Rate_Admitted','d__Multiplier1_Rate_NonAdmitted','d__Multiplier2_Rate_Admitted',
                                'd__Multiplier2_Rate_NonAdmitted','d__Multiplier3_Rate_Admitted','d__Multiplier3_Rate_NonAdmitted',
                                'd__NonAdmittedRate','d__NonAdmittedRate_Band2','d__NonAdmittedRate_Band3','d__NonFireElementRate',
                                'd__TaxMaximum','d__TaxMinimum','ID_BasisOfCalculation','ID_Country','ID_Currency',
                                'ID_InsuranceClass','ID_RateAdditional','ID_RateDefault',
                                'ID_Region','s__TaxRateDisplay','s__UpdateCopyToServer','d__RateEndDate','d__RateStartDate','d__UseBanding'))
                    ->where( 'ID_RateMaster = ?', $rate->getId());
                    
                    $query = $rateLine->query();
                    $result = $query->fetchAll();
                    if(count($result)>0){
                        foreach ($result as $rateline) {
                            $rateline['ID_RateMaster']  = $rateMasterId;
                            $db->insert('Rateline', $rateline); 
                        }   
                    }
                                            
                    $db->commit();
                    return $rateMasterId;
                }
                catch( Exception $e )
                {
                    $db->rollBack();
                }

                
            }  catch (exception $e){
                 throw new Exception($e->getMessage());
            }
        }
    }
    
}

